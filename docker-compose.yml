
services:
  db:
    image: postgres:15
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: fastapi_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped

  backend:
    build: ./backend
    ports:
      - "8000:8000"
    environment:
      DATABASE_URL: postgresql://user:password@db:5432/fastapi_db
      DB_HOST: db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: fastapi_db
      # GCP Configuration
      GCP_STORAGE_ENABLED: "true"
      GCP_AI_ENABLED: "true"
      GCP_PROJECT_ID: ${GCP_PROJECT_ID:-tmg-market-research}
      GCP_STORAGE_BUCKET_PHOTOS: ${GCP_STORAGE_BUCKET_PHOTOS:-tmg-market-research-photos}
      GCP_STORAGE_BUCKET_VIDEOS: ${GCP_STORAGE_BUCKET_VIDEOS:-tmg-market-research-videos}
      GOOGLE_APPLICATION_CREDENTIALS: /app/gcp-credentials.json
      GEMINI_API_KEY: ${GEMINI_API_KEY:-}
      # CORS Configuration
      ALLOWED_ORIGINS: "http://localhost:3000"
    depends_on:
      db:
        condition: service_started
    volumes:
      - ./backend/tmg-market-research-fd13d009581b.json:/app/gcp-credentials.json:ro
    restart: unless-stopped
    entrypoint: ["/app/docker-entrypoint.sh"]

  frontend:
    build:
      context: ./frontend
      args:
        NEXT_PUBLIC_API_URL: http://localhost:8000
    ports:
      - "3000:3000"
    depends_on:
      - backend
    restart: unless-stopped

volumes:
  postgres_data: