[tool.poetry]
name = "market-research-backend"
version = "1.0.0"
description = "Market Research Survey Platform Backend with AI Analysis"
authors = ["Your Team <team@example.com>"]
readme = "README.md"
license = "MIT"
packages = [{include = "app"}]

[tool.poetry.dependencies]
python = "^3.11"

# Web Framework
fastapi = "^0.104.1"
uvicorn = {extras = ["standard"], version = "^0.24.0"}
python-multipart = "^0.0.6"

# Database
sqlalchemy = "^2.0.23"
psycopg2-binary = "^2.9.9"
alembic = "^1.12.1"

# Configuration
python-dotenv = "^1.0.0"

# Data Validation
pydantic = {extras = ["email"], version = "^2.5.0"}

# Google Cloud Services
google-cloud-storage = "^2.10.0"
google-cloud-vision = "^3.4.5"
google-cloud-videointelligence = "^2.11.4"
google-generativeai = "^0.3.2"
google-cloud-secret-manager = "^2.18.1"

# Image Processing
pillow = "^10.1.0"

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^7.4.0"
pytest-cov = "^4.1.0"
pytest-xdist = "^3.3.0"
pytest-mock = "^3.11.0"
pytest-timeout = "^2.1.0"
pytest-asyncio = "^0.21.0"
pytest-env = "^0.8.2"

# Code Quality
pytest-flake8 = "^1.1.1"
pytest-mypy = "^0.10.3"
black = "^23.11.0"
isort = "^5.12.0"
flake8 = "^6.1.0"
mypy = "^1.7.0"
pylint = "^3.0.0"

# Test Data
faker = "^19.0.0"
factory-boy = "^3.3.0"
hypothesis = "^6.82.0"

# Development Tools
ipython = "^8.17.0"
ipdb = "^0.13.13"

[tool.poetry.group.docs.dependencies]
# Documentation (optional)
mkdocs = "^1.5.3"
mkdocs-material = "^9.4.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# ============================================================================
# Tool Configurations
# ============================================================================

[tool.pytest.ini_options]
# Pytest configuration
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

addopts = [
    "-v",
    "--strict-markers",
    "--tb=short",
    "--disable-warnings",
    "--color=yes",
]

markers = [
    "unit: Unit tests for individual functions/classes",
    "integration: Integration tests for multiple components",
    "slow: Tests that take a long time to run",
]

norecursedirs = [
    ".git",
    ".tox",
    "dist",
    "build",
    "*.egg",
    "__pycache__",
    ".next",
    "node_modules",
    "alembic",
]

log_cli = false
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

[tool.coverage.run]
# Coverage configuration
source = ["."]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/alembic/*",
    "*/node_modules/*",
    "*/.venv/*",
    "*/venv/*",
]

[tool.coverage.report]
# Coverage reporting
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.black]
# Black code formatter
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | alembic
  | node_modules
)/
'''

[tool.isort]
# Import sorting
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["*/alembic/*", "*/node_modules/*"]

[tool.mypy]
# Type checking
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "google.*",
    "PIL.*",
    "alembic.*",
]
ignore_missing_imports = true

[tool.pylint.main]
# Pylint configuration
max-line-length = 100
disable = [
    "C0114",  # missing-module-docstring
    "C0115",  # missing-class-docstring
    "C0116",  # missing-function-docstring
    "R0903",  # too-few-public-methods
    "R0913",  # too-many-arguments
]

[tool.pylint.format]
max-line-length = 100

[tool.poetry.scripts]
# Custom scripts
test = "pytest"
test-cov = "pytest --cov=. --cov-report=html --cov-report=term"
format = "black ."
lint = "pylint *.py"
type-check = "mypy ."
