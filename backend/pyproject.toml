[tool.poetry]
name = "market-research-backend"
version = "1.0.0"
description = "Market Research Survey Platform Backend with AI Analysis"
authors = ["Your Team <team@example.com>"]
readme = "README.md"
license = "MIT"
packages = [{include = "app"}]

[tool.poetry.dependencies]
python = "^3.11"

# Web Framework
fastapi = "^0.104.1"
uvicorn = {extras = ["standard"], version = "^0.24.0"}
python-multipart = "^0.0.6"

# Database
sqlalchemy = "^2.0.23"
psycopg2-binary = "^2.9.9"
alembic = "^1.12.1"

# Configuration
python-dotenv = "^1.0.0"

# Data Validation
pydantic = {extras = ["email"], version = "^2.5.0"}

# Security & Rate Limiting
slowapi = "^0.1.9"
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}

# Input Validation & Sanitization
bleach = "^6.1.0"
python-magic = "^0.4.27"

# Google Cloud Services
google-cloud-storage = "^2.10.0"
google-cloud-vision = "^3.4.5"
google-cloud-videointelligence = "^2.11.4"
google-generativeai = "^0.3.2"
google-cloud-secret-manager = "^2.18.1"

# Image Processing
pillow = "^10.1.0"
httpx = "<0.28"

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^7.4.0"
pytest-cov = "^4.1.0"
pytest-xdist = "^3.3.0"
pytest-mock = "^3.11.0"
pytest-timeout = "^2.1.0"
pytest-asyncio = "^0.21.0"
pytest-env = "^0.8.2"

# Code Quality - Linting & Formatting
ruff = "^0.8.4"

# Code Quality - Type Checking
mypy = "^1.7.0"

# Test Data
faker = "^19.0.0"
factory-boy = "^3.3.0"
hypothesis = "^6.82.0"

# Development Tools
ipython = "^8.17.0"
ipdb = "^0.13.13"

[tool.poetry.group.docs.dependencies]
# Documentation (optional)
mkdocs = "^1.5.3"
mkdocs-material = "^9.4.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# ============================================================================
# Tool Configurations
# ============================================================================

[tool.pytest.ini_options]
# Pytest configuration
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

addopts = [
    "-v",
    "--strict-markers",
    "--tb=short",
    "--disable-warnings",
    "--color=yes",
]

markers = [
    "unit: Unit tests for individual functions/classes",
    "integration: Integration tests for multiple components",
    "slow: Tests that take a long time to run",
]

norecursedirs = [
    ".git",
    ".tox",
    "dist",
    "build",
    "*.egg",
    "__pycache__",
    ".next",
    "node_modules",
    "alembic",
]

log_cli = false
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

[tool.coverage.run]
# Coverage configuration
source = ["."]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/alembic/*",
    "*/node_modules/*",
    "*/.venv/*",
    "*/venv/*",
]

[tool.coverage.report]
# Coverage reporting
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

# ============================================================================
# Ruff Configuration
# ============================================================================

[tool.ruff]
# Main configuration
target-version = "py311"
line-length = 100
indent-width = 4

# Exclude directories
exclude = [
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    ".venv",
    "venv",
    "__pycache__",
    "alembic",
    "build",
    "dist",
    "node_modules",
]

[tool.ruff.lint]
# Enable specific rule sets
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "N",      # pep8-naming
    "UP",     # pyupgrade
    "ANN",    # flake8-annotations
    "ASYNC",  # flake8-async
    "S",      # flake8-bandit (security)
    "B",      # flake8-bugbear
    "A",      # flake8-builtins
    "COM",    # flake8-commas
    "C4",     # flake8-comprehensions
    "DTZ",    # flake8-datetimez
    "T10",    # flake8-debugger
    "EM",     # flake8-errmsg
    "EXE",    # flake8-executable
    "ISC",    # flake8-implicit-str-concat
    "ICN",    # flake8-import-conventions
    "G",      # flake8-logging-format
    "PIE",    # flake8-pie
    "T20",    # flake8-print
    "PYI",    # flake8-pyi
    "PT",     # flake8-pytest-style
    "Q",      # flake8-quotes
    "RSE",    # flake8-raise
    "RET",    # flake8-return
    "SLF",    # flake8-self
    "SIM",    # flake8-simplify
    "TID",    # flake8-tidy-imports
    "TCH",    # flake8-type-checking
    "ARG",    # flake8-unused-arguments
    "PTH",    # flake8-use-pathlib
    "ERA",    # eradicate
    "PL",     # pylint
    "TRY",    # tryceratops
    "FLY",    # flynt
    "PERF",   # perflint
    "RUF",    # ruff-specific rules
]

# Ignore specific rules
ignore = [
    "ANN401",   # Dynamically typed expressions (Any) are disallowed
    "S101",     # Use of assert detected (we use assert in tests)
    "S104",     # Possible binding to all interfaces
    "S105",     # Possible hardcoded password
    "S106",     # Possible hardcoded password
    "S107",     # Possible hardcoded password
    "B008",     # Do not perform function call in argument defaults
    "COM812",   # Trailing comma missing (conflicts with formatter)
    "ISC001",   # Single line implicit string concatenation (conflicts with formatter)
    "PLR0913",  # Too many arguments to function call
    "PLR2004",  # Magic value used in comparison
    "TRY003",   # Avoid specifying long messages outside the exception class
    "EM101",    # Exception must not use a string literal
    "EM102",    # Exception must not use an f-string literal
    "G004",     # Logging statement uses f-string
]

# Allow fix for all enabled rules (when `--fix` is provided)
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
# Ignore specific rules in specific files
"tests/**/*.py" = [
    "S101",     # Use of assert detected
    "ANN001",   # Missing type annotation for function argument
    "ANN201",   # Missing return type annotation
    "ANN202",   # Missing return type annotation for private function
    "PLR2004",  # Magic value used in comparison
    "ARG001",   # Unused function argument
    "ARG002",   # Unused method argument
]
"alembic/**/*.py" = [
    "ANN",      # Type annotations not required in migrations
    "ERA001",   # Commented-out code (common in migrations)
]
"app/models/**/*.py" = [
    "ANN204",   # Missing return type annotation for special method
]

[tool.ruff.format]
# Formatting configuration
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = "dynamic"

[tool.ruff.lint.isort]
# Import sorting configuration
known-first-party = ["app"]
combine-as-imports = true
split-on-trailing-comma = false

[tool.ruff.lint.pylint]
# Pylint-like rules configuration
max-args = 8
max-branches = 15
max-returns = 8
max-statements = 60

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "double"
multiline-quotes = "double"

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true
suppress-none-returning = true

# ============================================================================
# MyPy Configuration
# ============================================================================

[tool.mypy]
# Type checking
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = true
strict_optional = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true

# Per-module options
[[tool.mypy.overrides]]
module = [
    "google.*",
    "PIL.*",
    "alembic.*",
    "slowapi.*",
    "bleach.*",
    "magic.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.poetry.scripts]
# Custom scripts
dev = "uvicorn app.main:app --reload --host 0.0.0.0 --port 8000"
