import datetime

from sqlalchemy import Boolean, Column, DateTime, ForeignKey, Integer, String, Text
from sqlalchemy.orm import relationship

from app.core.database import Base
from app.core.db_types import BigIntegerType


class ReportingLabel(Base):
    """
    High-level reporting labels that group together lower-level system-generated labels.
    These can be renamed, created, and deleted by users.
    """
    __tablename__ = "reporting_labels"

    id = Column(Integer, primary_key=True, index=True)
    survey_id = Column(BigIntegerType, ForeignKey("surveys.id"), nullable=False)
    label_name = Column(String(255), nullable=False)
    description = Column(Text, nullable=True)  # Optional description of what this label represents
    is_ai_generated = Column(Boolean, default=True)  # Track if label was generated by Gemini or user-created
    created_at = Column(DateTime, default=datetime.datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.datetime.utcnow, onupdate=datetime.datetime.utcnow)

    # Relationships
    survey = relationship("Survey", back_populates="reporting_labels")
    label_mappings = relationship("LabelMapping", back_populates="reporting_label", cascade="all, delete-orphan")


class LabelMapping(Base):
    """
    Maps system-generated labels (from media analysis) to high-level reporting labels.
    Each system label can only belong to one reporting label.
    """
    __tablename__ = "label_mappings"

    id = Column(Integer, primary_key=True, index=True)
    reporting_label_id = Column(Integer, ForeignKey("reporting_labels.id"), nullable=False)
    system_label = Column(String(255), nullable=False)  # The low-level label from media analysis
    created_at = Column(DateTime, default=datetime.datetime.utcnow)

    # Relationships
    reporting_label = relationship("ReportingLabel", back_populates="label_mappings")
